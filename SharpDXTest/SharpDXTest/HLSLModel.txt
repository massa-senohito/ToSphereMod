
cbuffer data :register(b0)
{
	float4x4 World;
	float4x4 View;
	float4x4 WorldViewProj;
	float alpha;
};
cbuffer MaterialData :register(b1)
{
	bool UseSphere;
	bool IsAdd;
	float MatAlpha;
};

struct VS_IN
{
	float4 position : POSITION;
	float3 normal   : NORMAL;
	float2 texcoord : TEXCOORD;
};

struct PS_IN
{
	float4 position : SV_POSITION;
	float3 normal   : NORMAL;
	float2 spTex    : TEXCOORD0;
	float2 texcoord : TEXCOORD1;
};

//texture
Texture2D textureMap;
SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

Texture2D sphereMap;
SamplerState sphereSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};



PS_IN VS( VS_IN input)
{
	PS_IN output = (PS_IN)0;

	output.position = mul(WorldViewProj,input.position);
	output.normal   = mul(input.normal,World);
	output.texcoord = input.texcoord;
	float2 NormalWV = mul(output.normal, View);
	output.spTex.x  = NormalWV.x * 0.5f + 0.5f;
	output.spTex.y  = NormalWV.y * 0.5f + 0.5f;

	return output;
}

float4 PS( PS_IN input ) : SV_Target
{
	float4 sampled = textureMap.Sample( textureSampler, input.texcoord );
	if(UseSphere)
	{
		if(IsAdd)
		{
			sampled += sphereMap.Sample( sphereSampler , input.spTex );
		}
		else
		{
			sampled *= sphereMap.Sample( sphereSampler , input.spTex );
		}
	}
	sampled.w *= alpha;
	return sampled;
}
